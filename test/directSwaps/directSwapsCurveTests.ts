import { ethers } from "hardhat";
import { Contract } from "ethers";
import { swapCurve } from "./directSwapsHelpers";

import {
  CURVE_3POOL,
  WETH_TOKEN,
  CURVE_3CRYPTO,
  CURVE_COMPOUND,
  CURVE_STETH,
  CURVE_GENERIC_ZAP,
  CURVE_SDT_FRAXUSDC,
} from "./directSwapsConstants";

let augustusSwapper: Contract;
let directSwap: Contract;
let deployer: any;

describe("Direct Curve Swaps", function () {
  it("Deploy AugustusSwapper", async function () {
    deployer = (await ethers.getSigners())[0];
    const AugustusSwapper = await ethers.getContractFactory("AugustusSwapper");
    augustusSwapper = await AugustusSwapper.deploy(deployer.address);
    const FeeClaimer = await ethers.getContractFactory("FeeClaimer");
    const feeClaimer = await FeeClaimer.deploy(augustusSwapper.address);
    const DirectSwap = await ethers.getContractFactory("DirectSwap");
    directSwap = await DirectSwap.deploy(WETH_TOKEN.address, 8500, 500, 5000, 10000, feeClaimer.address);
    const iface = directSwap.interface;
    const selectorUniV3Sell = iface.getSighash("directUniV3Swap");
    const selectorUniV3Buy = iface.getSighash("directUniV3Buy");
    const selectorCurveV1 = iface.getSighash("directCurveV1Swap");
    const selectorCurveV2 = iface.getSighash("directCurveV2Swap");
    const selectorBalV2GivenIn = iface.getSighash("directBalancerV2GivenInSwap");
    const selectorBalV2GivenOut = iface.getSighash("directBalancerV2GivenOutSwap");
    await augustusSwapper.grantRole(await augustusSwapper.ROUTER_ROLE(), directSwap.address);
    await augustusSwapper.setImplementation(selectorUniV3Sell, directSwap.address);
    await augustusSwapper.setImplementation(selectorUniV3Buy, directSwap.address);
    await augustusSwapper.setImplementation(selectorCurveV1, directSwap.address);
    await augustusSwapper.setImplementation(selectorCurveV2, directSwap.address);
    await augustusSwapper.setImplementation(selectorBalV2GivenIn, directSwap.address);
    await augustusSwapper.setImplementation(selectorBalV2GivenOut, directSwap.address);
    directSwap = await ethers.getContractAt("DirectSwap", augustusSwapper.address);
  });
  it("3Pool exchange - no fee no PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
    );
  });
  it("3Pool exchange - with fee from toToken no PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
  });
  it("3Pool exchange - with fee from fromToken no PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
  });
  it("3Pool exchange - no fee with PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
  });
  it("3Pool exchange - with fee from toToken with PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
  });
  it("3Pool exchange - with fee from fromToken with PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_3POOL,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
  });
  it("3Crypto exchange - no fee no PS", async function () {
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
    );
  });
  it("3Crypto exchange - with fee from toToken no PS", async function () {
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
    );
  });
  it("3Crypto exchange - with fee from fromToken no PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
  });
  it("3Crypto exchange - no fee with PS", async function () {
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
  });
  it("3Crypto exchange - with fee from toToken with PS", async function () {
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
  });
  it("3Crypto exchange - with fee from fromToken with PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      0,
      2,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      1,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      1,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x8EB8a3b98659Cce290402893d0123abb75E3ab28",
      CURVE_3CRYPTO,
      ethers.constants.AddressZero,
      2,
      0,
      10,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
  });
  it("STeth exchange - no fee no PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      true,
      false,
      0,
      0,
      "",
      0,
      false,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      1,
      0,
      5,
      false,
      true,
      0,
      0,
      "",
      0,
      false,
      true,
    );
  });
  it("STeth exchange - with fee from toToken no PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      true,
      false,
      0,
      100,
      "to",
      0,
      false,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      1,
      0,
      5,
      false,
      true,
      0,
      100,
      "to",
      0,
      false,
      true,
    );
  });
  it("STeth exchange - with fee from fromToken no PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      true,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      false,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      1,
      0,
      5,
      false,
      true,
      0,
      100,
      "from",
      feePercentPacked,
      false,
      true,
    );
  });
  it("STeth exchange - no fee with PS", async function () {
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(16))
      .add(ethers.BigNumber.from(5000));
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      0,
      1,
      20,
      true,
      false,
      0,
      0,
      "",
      feePercentPacked,
      true,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      1,
      0,
      20,
      false,
      true,
      0,
      0,
      "",
      feePercentPacked,
      true,
      true,
    );
  });
  it("STeth exchange - with fee from toToken with PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      true,
      false,
      0,
      100,
      "to",
      0,
      true,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      1,
      0,
      5,
      false,
      true,
      0,
      100,
      "to",
      0,
      true,
      true,
    );
  });
  it("STeth exchange - with fee from fromToken with PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      0,
      1,
      10,
      true,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_STETH,
      ethers.constants.AddressZero,
      1,
      0,
      5,
      false,
      true,
      0,
      100,
      "from",
      feePercentPacked,
      true,
      true,
    );
  });
  it("Compound exchange and exchange_underlying - no fee no PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      0,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      0,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      1,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      1,
    );
  });
  it("Compound exchange and exchange_underlying - with fee from toToken no PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      0,
      100,
      "to",
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      1,
      100,
      "to",
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      1,
      100,
      "to",
    );
  });
  it("Compound exchange and exchange_underlying - with fee from fromToken no PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      1,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      1,
      100,
      "from",
      feePercentPacked,
    );
  });
  it("Compound exchange and exchange_underlying - no fee with PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      0,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      1,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      1,
      0,
      "",
      0,
      true,
    );
  });
  it("Compound exchange and exchange_underlying - with fee from toToken with PS", async function () {
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      0,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      1,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      1,
      100,
      "to",
      0,
      true,
    );
  });
  it("Compound exchange and exchange_underlying - with fee from fromToken with PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x30030383d959675eC884E7EC88F05EE0f186cC06",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      0,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      0,
      1,
      1,
      false,
      false,
      1,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      true,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0x3CC936b795A188F0e246cBB2D74C5Bd190aeCF18",
      CURVE_COMPOUND,
      ethers.constants.AddressZero,
      1,
      0,
      1,
      false,
      false,
      1,
      100,
      "from",
      feePercentPacked,
      true,
    );
  });
  it("Generic zap SDT-FRAX-USDC - no fee no PS", async function () {
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      1,
      100,
      false,
      false,
      2,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      2,
      10,
      false,
      false,
      2,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      1,
      10,
      false,
      false,
      2,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      0,
      10,
      false,
      false,
      2,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      0,
      10,
      false,
      false,
      2,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      2,
      10,
      false,
      false,
      2,
    );
  });
  it("Generic zap SDT-FRAX-USDC - with fee from toToken no PS", async function () {
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      1,
      100,
      false,
      false,
      2,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      2,
      10,
      false,
      false,
      2,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      1,
      10,
      false,
      false,
      2,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      0,
      10,
      false,
      false,
      2,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      0,
      10,
      false,
      false,
      2,
      100,
      "to",
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      2,
      10,
      false,
      false,
      2,
      100,
      "to",
    );
  });
  it("Generic zap SDT-FRAX-USDC - with fee from fromToken no PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      1,
      100,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      2,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      1,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      0,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      0,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      2,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
    );
  });
  it("Generic zap SDT-FRAX-USDC - no fee with PS", async function () {
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      1,
      100,
      false,
      false,
      2,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      2,
      10,
      false,
      false,
      2,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      1,
      10,
      false,
      false,
      2,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      0,
      10,
      false,
      false,
      2,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      0,
      10,
      false,
      false,
      2,
      0,
      "",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      2,
      10,
      false,
      false,
      2,
      0,
      "",
      0,
      true,
    );
  });
  it("Generic zap SDT-FRAX-USDC - with fee from toToken with PS", async function () {
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      1,
      100,
      false,
      false,
      2,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      2,
      10,
      false,
      false,
      2,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      1,
      10,
      false,
      false,
      2,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      0,
      10,
      false,
      false,
      2,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      0,
      10,
      false,
      false,
      2,
      100,
      "to",
      0,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      2,
      10,
      false,
      false,
      2,
      100,
      "to",
      0,
      true,
    );
  });
  it("Generic zap SDT-FRAX-USDC - with fee from fromToken with PS", async function () {
    // feePercent packed structure, basis points 100, take fee from fromToken
    const feePercentPacked = ethers.BigNumber.from(2)
      .pow(248)
      .add(ethers.BigNumber.from(2).pow(14))
      .add(ethers.BigNumber.from(2).pow(15))
      .add(100);
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      1,
      100,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      2,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      1,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      1,
      0,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      2,
      0,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
      true,
    );
    await swapCurve(
      false,
      augustusSwapper,
      directSwap,
      deployer.address,
      "0xC5d3D004a223299C4F95Bb702534C14A32e8778c",
      CURVE_GENERIC_ZAP,
      CURVE_SDT_FRAXUSDC,
      0,
      2,
      10,
      false,
      false,
      2,
      100,
      "from",
      feePercentPacked,
      true,
    );
  });
});
